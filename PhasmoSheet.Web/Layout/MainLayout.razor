@using PhasmoSheet.Core.Common
@using PhasmoSheet.Core.Ghosts
@inherits LayoutComponentBase
@inject GlobalState state

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<div class="container">
    <aside class="sidebar" style="border-right: 1px dashed white ;">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="width: 100%;" OnClick="@(() => state.Reset())">
            Reset
        </MudButton>
        <MudText Typo="Typo.h5">
            Evidence
            <MudIconButton OnClick="ToggleEvidence" Icon="@(evidenceCollapsed ? Icons.Material.Filled.ExpandMore : Icons.Material.Filled.ExpandLess)" />
        </MudText>
        <MudCollapse Expanded="!evidenceCollapsed">
            @foreach (var evidence in evidences)
            {
                <MudButton Variant="Variant.Filled"
                           OnClick="@(() => state.ToggleEvidence(evidence))"
                           Color="@(state.GetEvidenceButtonColor(evidence))"
                           Class="icon-text-button"
                           Disabled=@(!IsEnabled(evidence))
                Style="width: 100%;">
                    <MudIcon Icon="@state.GetEvidenceIconButton(evidence)" />
                    <span class="icon-text">@Format.Evidence(evidence)</span>
                </MudButton>
                <div></div>
            }
        </MudCollapse>

        <MudText Typo="Typo.h5">
            Events
            <MudIconButton OnClick="ToggleEvent" Icon="@(eventCollapsed ? Icons.Material.Filled.ExpandMore : Icons.Material.Filled.ExpandLess)" />
            </MudText>
            <MudCollapse Expanded="!eventCollapsed">
                @foreach (var ghostEvent in events)
                {
                    <MudButton Variant="Variant.Filled"
                               OnClick="@(() => state.ToggleEvent(ghostEvent))"
                           Color="@(state.GetGhostEventButtonColor(ghostEvent))"
                               Class="icon-text-button"
                               Style="width: 100%;">
                    <MudIcon Icon="@state.GetGhostEventIconButton(ghostEvent)" />
                        <span class="icon-text">@Format.GhostEvent(ghostEvent)</span>
                    </MudButton>
                    <div></div>
                }
                </MudCollapse>
    </aside>
    <main class="content">
        @Body
    </main>
</div>

<style>
    body {
        background-color: rgba(20, 20, 20, 255);
        margin: 0;
        font-family: Arial, sans-serif;
    }

    .container {
        display: flex;
    }

    .sidebar {
        width: 256px;
        color: #fff;
        padding: 10px;
        display: flex;
        flex-direction: column;
        position: fixed;
        height: 100vh; /* Full viewport height */
        overflow-y: auto; /* Enable vertical scrolling */
        transition: width 0.3s;
    }

        .sidebar button {
            background: none;
            border: none;
            color: #fff;
            padding: 10px;
            text-align: left;
            cursor: pointer;
            font-size: 16px;
        }

            .sidebar button.active {
                background-color: #444;
            }

    .content {
        margin-left: 276px;
        padding: 20px;
        flex: 1;
    }

    .icon-text-button {
        display: flex;
        align-items: center; /* Aligns items vertically centered */
        justify-content: flex-start; /* Aligns items horizontally left */
    }

    .icon-text {
        margin-left: 8px; /* Adjust the spacing as needed */
    }


</style>

@code {
    private bool evidenceCollapsed = false;
    private bool eventCollapsed = true;
    private TheMimic mimic = new TheMimic();
    private List<Ghost> allGhosts = Ghost.GetAll();

    protected override void OnInitialized()
    {
        events = Enum.GetValues(typeof(GhostEvents)).Cast<GhostEvents>().OrderBy(e => e.ToString()).ToArray();
    }

    private void ToggleEvidence()
    {
        evidenceCollapsed = !evidenceCollapsed;
        StateHasChanged();
    }

    private void ToggleEvent()
    {
        eventCollapsed = !eventCollapsed;
        StateHasChanged();
    }

    private bool IsEnabled(Evidence evidence)
    {
        var matchingGhosts = allGhosts.Where(g => state.ConfirmedEvidences.All(e => g.Evidences.Contains(e))).ToList();
        bool containsThisEvidence = matchingGhosts.Any(g => g.Evidences.Contains(evidence));

        if(!containsThisEvidence)
        {
            return false;
        }

        if (state.ConfirmedEvidences.Contains(evidence) || state.RuledOutEvidences.Contains(evidence))
            return true;
        if (containsThisEvidence && state.CanPickMoreEvidence)
            return true;

        bool matchingAllMimicEvidences = state.ConfirmedEvidences.All(e => mimic.Evidences.Contains(e));
        bool containsMimicEvidence = mimic.Evidences.Contains(evidence);

        if(!state.CanPickMoreEvidence)
        {
            if(evidence == Evidence.GhostOrb)
            {
                return matchingAllMimicEvidences;
            }
        }
        return containsThisEvidence && state.ConfirmedEvidences.Contains(Evidence.GhostOrb);
    }


    private Evidence[] evidences = new Evidence[]
    {
        Evidence.EMF5,
        Evidence.Ultraviolet,
        Evidence.GhostOrb,
        Evidence.GhostWriting,
        Evidence.FreezingTemperatures,
        Evidence.SpiritBox,
        Evidence.DOTSProjector
    };

    private GhostEvents[] events = new GhostEvents[]
    {
        
    };
}
