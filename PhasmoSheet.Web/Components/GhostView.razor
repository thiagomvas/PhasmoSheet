@using PhasmoSheet.Core.Ghosts
@using PhasmoSheet.Core.Common
@using System.ComponentModel
@inject IJSRuntime JS

@code {
    [Parameter]
    public Ghost Ghost { get; set; }

    [Inject]
    private GlobalState State { get; set; }

    private string GetCardColor()
    {
        if (State.CorrectGhosts.Contains(Ghost))
            return Colors.Green.Darken4;
        if (State.RuledOutGhosts.Contains(Ghost))
            return Colors.Red.Darken4;
        return "#0f0f0f";
    }


    private void OnStateChanged(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(State.ConfirmedEvidences) || e.PropertyName == nameof(State.RuledOutEvidences))
        {
            StateHasChanged(); // Refresh the component
        }
    }
    private async Task PlayBansheeSound()
    {
        await JS.InvokeVoidAsync("toggleAudio", "banshee");
    }
    private async Task PlayDeogenSound()
    {
        await JS.InvokeVoidAsync("toggleAudio", "deogen");
    }
    protected override void OnInitialized()
    {
        State.PropertyChanged += OnStateChanged;
    }

    public void Dispose()
    {
        State.PropertyChanged -= OnStateChanged;
    }
}
@if(Ghost.GetType() == typeof(Banshee))
{
    <audio id="banshee" src="Sounds/bansheescream.mp3" preload="auto"></audio>    
}
@if(Ghost.GetType() == typeof(Deogen))
{
    <audio id="deogen" src="Sounds/deogenbreath.mp3" preload="auto"></audio>    

}

<MudCard Style=@($"background-color: {GetCardColor()}; color: white; height: 256px; display: flex; flex-direction: column;")>
    <!-- Main Content Area -->
    <div Style="display: flex; flex-direction: column; flex: 1;">
        <MudCardHeader Style="height: fit-content;">
            <CardHeaderContent>
                <MudText Typo="Typo.h5">@Ghost.Name</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="@(() => State.ConfirmGhost(Ghost))" />
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="@(() => State.RuleOutGhost(Ghost))" />
                    @if(Ghost.GetType() == typeof(Banshee))
                    {
                        <MudTooltip Text="Play Banshee Scream">
                            <MudIconButton OnClick="@(async() => await PlayBansheeSound())" Icon="@Icons.Material.Filled.VolumeUp" Color="Color.Info" />
                        </MudTooltip>
                }
                @if (Ghost.GetType() == typeof(Deogen))
                {
                    <MudTooltip Text="Play Deogen Breath">
                        <MudIconButton OnClick="@(async() => await PlayDeogenSound())" Icon="@Icons.Material.Filled.VolumeUp" Color="Color.Info" />
                    </MudTooltip>
                }
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent Style="display: flex; flex: 1; overflow: hidden;">
            <!-- Left Half -->
            <div Style="flex: 1; padding: 0px 16px 0px 16px;">
                <MudText Typo="Typo.h6">
                    Evidences
                </MudText>
                <MudCardActions>
                    @foreach (var evidence in Ghost.Evidences)
                    {
                        <MudChip T="string"
                                 Size="Size.Small"
                                 Variant="@(evidence == Ghost.GuaranteedEvidence ? Variant.Filled : Variant.Outlined)"
                                 Color="@(State.ConfirmedEvidences.Contains(evidence) ? Color.Success : Color.Error)">
                            @Format.Evidence(evidence)
                        </MudChip>
                    }
                </MudCardActions>
                <div style="display: flex; align-items: center;">
                    <MudTooltip Text=@($"Can hunt from below average sanity of {Ghost.MinSanityPercentage}%")>
                        <img src="Icons/brain.svg" alt="Icon" style="margin-right: 10px; width: 24px; height: 24px; filter: brightness(0) invert(1);">
                    </MudTooltip>
                    <div style="display: flex; justify-content: left; flex: 1;">@Ghost.MinSanityPercentage% <span style="color: darkgray"> @Ghost.FormatConditionalSanities()</span></div>
                </div>
                <br />
                <div style="display: flex; align-items: center;">
                    <img src="Icons/footstep.svg" alt="Icon" style="margin-right: 10px; width: 24px; height: 24px; filter: brightness(0) invert(1);">
                    @if(Ghost.HasStandardLOSAccel)
                    {
                        <MudTooltip Text="Has stantard LOS acceleration">
                            <img src="Icons/eye.svg" alt="Icon" style="margin-right: 10px; width: 24px; height: 24px; filter: brightness(0) invert(1);">
                        </MudTooltip>
                    }
                    else {
                        <MudTooltip Text="Does not have stantard LOS acceleration">
                            <img src="Icons/eyecrossed.svg" alt="Icon" style="margin-right: 10px; width: 24px; height: 24px; filter: brightness(0) invert(1);">
                        </MudTooltip>
                    }
                    <div style="display: flex; justify-content: left; flex: 1;">@Ghost.DefaultFootstepSpeed m/s <span style="color: darkgray"> @Ghost.FormatAdditionalSpeeds()</span></div>
                </div>
            </div>
            <!-- Right Half (Scrollable Text Block) -->
            <div Style="border-radius: 5px; background-color: #080808; flex: 1; padding: 16px; overflow-y: auto; max-height: 128px;">
                <MudText Typo="Typo.body2">
                    @if (Ghost.Tells.Length > 0)
                    {
                        <h3>Tells</h3>
                        @foreach (var ability in Ghost.Tells.OrderByDescending(i => i.Usefulness))
                        {
                            <div style="@($"{(ability.Usefulness == Usefulness.Important ? "color: yellow;" : "")}")">• @ability</div>
                        }
                    }
                    @if (Ghost.RuleOuts.Length > 0)
                    {
                        <h3>Rule Outs</h3>
                        @foreach (var ability in Ghost.RuleOuts.OrderByDescending(i => i.Usefulness))
                        {
                            <div style="@($"{(ability.Usefulness == Usefulness.Important ? "color: yellow;" : "")}")">• @ability</div>
                        }
                    }
                    @if (Ghost.ConfirmationTests.Length > 0)
                    {
                        <h3>Confirmation Tests</h3>
                        @foreach (var ability in Ghost.ConfirmationTests.OrderByDescending(i => i.Usefulness))
                        {
                            <div style="@($"{(ability.Usefulness == Usefulness.Important ? "color: yellow;" : "")}")">• @ability</div>
                        }
                    }
                    @if (Ghost.Abilities.Length > 0)
                    {
                        <h3>Special Abilities</h3>
                        @foreach (var ability in Ghost.Abilities.OrderByDescending(i => i.Usefulness))
                        {
                            <div style="@($"{(ability.Usefulness == Usefulness.Important ? "color: yellow;" : "")}")">• @ability</div>
                        }
                    }
                </MudText>
            </div>
        </MudCardContent>
    </div>
</MudCard>




